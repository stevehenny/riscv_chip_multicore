$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module $unit $end
  $var wire 7 - OP [6:0] $end
  $var wire 7 . OPIMM [6:0] $end
  $var wire 3 / ADDFUNCT3 [2:0] $end
  $var wire 7 0 ADDFUNCT7 [6:0] $end
  $var wire 3 / SUBFUNCT3 [2:0] $end
  $var wire 7 1 SUBFUNCT7 [6:0] $end
  $var wire 3 2 ANDFUNCT3 [2:0] $end
  $var wire 7 0 ANDFUNCT7 [6:0] $end
  $var wire 3 3 ORFUNCT3 [2:0] $end
  $var wire 7 0 ORFUNCT7 [6:0] $end
  $var wire 3 4 XORFUNCT3 [2:0] $end
  $var wire 7 0 XORFUNCT7 [6:0] $end
  $var wire 3 5 SLLFUNCT3 [2:0] $end
  $var wire 7 0 SLLFUNCT7 [6:0] $end
  $var wire 3 6 SRLFUNCT3 [2:0] $end
  $var wire 7 0 SRLFUNCT7 [6:0] $end
  $var wire 3 6 SRAFUNCT3 [2:0] $end
  $var wire 7 1 SRAFUNCT7 [6:0] $end
  $var wire 3 7 SLTFUNCT3 [2:0] $end
  $var wire 7 0 SLTFUNCT7 [6:0] $end
  $var wire 3 8 SLTUFUNCT3 [2:0] $end
  $var wire 7 0 SLTUFUNCT7 [6:0] $end
  $var wire 3 / MULFUNCT3 [2:0] $end
  $var wire 7 9 MULFUNCT7 [6:0] $end
  $var wire 3 4 DIVFUNCT3 [2:0] $end
  $var wire 7 9 DIVFUNCT7 [6:0] $end
  $var wire 3 3 REMFUNCT3 [2:0] $end
  $var wire 7 9 REMFUNCT7 [6:0] $end
 $upscope $end
 $scope module tb_alu $end
  $var wire 32 * WIDTH [31:0] $end
  $var wire 32 # op1 [31:0] $end
  $var wire 32 $ op2 [31:0] $end
  $var wire 32 ( result [31:0] $end
  $var wire 7 % opcode [6:0] $end
  $var wire 3 & funct3 [2:0] $end
  $var wire 7 ' funct7 [6:0] $end
  $var wire 1 ) zero $end
  $var wire 1 + status $end
  $scope module dut $end
   $var wire 32 * WIDTH [31:0] $end
   $var wire 32 # op1 [31:0] $end
   $var wire 32 $ op2 [31:0] $end
   $var wire 32 ( result [31:0] $end
   $var wire 7 % opcode [6:0] $end
   $var wire 3 & funct3 [2:0] $end
   $var wire 7 ' funct7 [6:0] $end
   $var wire 1 ) zero $end
   $var wire 1 + status $end
   $var wire 32 , SHIFTWIDTH [31:0] $end
   $var wire 7 - OP [6:0] $end
   $var wire 7 . OPIMM [6:0] $end
   $var wire 3 / ADDFUNCT3 [2:0] $end
   $var wire 7 0 ADDFUNCT7 [6:0] $end
   $var wire 3 / SUBFUNCT3 [2:0] $end
   $var wire 7 1 SUBFUNCT7 [6:0] $end
   $var wire 3 2 ANDFUNCT3 [2:0] $end
   $var wire 7 0 ANDFUNCT7 [6:0] $end
   $var wire 3 3 ORFUNCT3 [2:0] $end
   $var wire 7 0 ORFUNCT7 [6:0] $end
   $var wire 3 4 XORFUNCT3 [2:0] $end
   $var wire 7 0 XORFUNCT7 [6:0] $end
   $var wire 3 5 SLLFUNCT3 [2:0] $end
   $var wire 7 0 SLLFUNCT7 [6:0] $end
   $var wire 3 6 SRLFUNCT3 [2:0] $end
   $var wire 7 0 SRLFUNCT7 [6:0] $end
   $var wire 3 6 SRAFUNCT3 [2:0] $end
   $var wire 7 1 SRAFUNCT7 [6:0] $end
   $var wire 3 7 SLTFUNCT3 [2:0] $end
   $var wire 7 0 SLTFUNCT7 [6:0] $end
   $var wire 3 8 SLTUFUNCT3 [2:0] $end
   $var wire 7 0 SLTUFUNCT7 [6:0] $end
   $var wire 3 / MULFUNCT3 [2:0] $end
   $var wire 7 9 MULFUNCT7 [6:0] $end
   $var wire 3 4 DIVFUNCT3 [2:0] $end
   $var wire 7 9 DIVFUNCT7 [6:0] $end
   $var wire 3 3 REMFUNCT3 [2:0] $end
   $var wire 7 9 REMFUNCT7 [6:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000101 #
b00000000000000000000000000000011 $
b0110011 %
b000 &
b0000000 '
b00000000000000000000000000001000 (
0)
b00000000000000000000000000100000 *
0+
b00000000000000000000000000000101 ,
b0110011 -
b0010011 .
b000 /
b0000000 0
b0100000 1
b111 2
b110 3
b100 4
b001 5
b101 6
b010 7
b011 8
b0000001 9
#10000
b0100000 '
b00000000000000000000000000000010 (
#20000
b00000000000000000001000000000001 #
b11111111111111111111111111111111 $
b111 &
b0000000 '
b00000000000000000001000000000001 (
#30000
b00010001000100010001000100010001 #
b00100010001000100010001000100010 $
b110 &
b00110011001100110011001100110011 (
#40000
b00010001000100010000000000000000 #
b00010001000100000001000000000000 $
b100 &
b00000000000000010001000000000000 (
#50000
b00000000000000000000000000000001 #
b00000000000000000000000000000010 $
b001 &
b00000000000000000000000000000100 (
#60000
b00000000000000000001000000000000 #
b101 &
b00000000000000000000010000000000 (
#70000
b00000000000000000000000000001111 #
b00000000000000000000000000000011 $
b0100000 '
b00000000000000000000000000000001 (
#80000
b11111111111111111111111111111100 #
b010 &
b0000000 '
#90000
b00000000000000000000000000001000 #
b00000000000000000000000000000010 $
b000 &
b0000001 '
b00000000000000000000000000000000 (
1)
